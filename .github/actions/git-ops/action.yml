name: 'Git Operations (Commit, Tag, Push)'
description: 'Performs Git commit, tagging, and force push operations.'

inputs:
  widget-id:
    description: "The widget ID from build"
    required: true
  next-version:
    description: "The next version to commit and tag"
    required: true
  base-branch:
    description: "The base branch to commit/tag back to"
    required: true
  github-token:
    description: "GITHUB_TOKEN for authentication"
    required: true

runs:
  using: composite
  steps:
    - name: Checkout Caller's Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}

    - name: Configure Git User
      shell: bash
      run: |
        git config user.email "DevOpsTeam@docusign.com"
        git config user.name "svc-git-devops"

    - name: Set Git Remote URL with GITHUB_TOKEN
      shell: bash
      run: |
        git remote set-url origin https://x-access-token:${{ inputs.github-token }}@github.com/${{ github.repository }}

    - name: Prepare Commit Message and Tag
      shell: bash
      env:
        VERSION: ${{ inputs.next-version }}
        WIDGET_NAME: ${{ inputs.widget-id }}
        INTEGRATION_CDN_URL: "https://1fe-a.akamaihd.net/integration/widgets"
        PREVIEW_URL: "https://demo.1fe.com/bathtub"
      run: |
        BUNDLE_URL="${INTEGRATION_CDN_URL}/${WIDGET_NAME}/${VERSION}/js/1fe-bundle.js"
        COMMIT_MSG="Bundle will be uploaded to: ${BUNDLE_URL} / Preview here: ${PREVIEW_URL}?widgetUrl=${BUNDLE_URL}&fixPreview=true [skip ci]"
        echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
        echo "TAG_VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Stage package.json
      shell: bash
      run: git add package.json

    - name: Amend Commit
      shell: bash
      run: git commit --amend --no-verify -m "${{ env.COMMIT_MSG }}" || echo "Nothing to amend"

    - name: Fetch and Force Push to Remote
      shell: bash
      run: |
        set -euo pipefail
        git fetch origin ${{ inputs.base-branch }}
        git reset --hard HEAD
        git push origin HEAD:${{ inputs.base-branch }} --force-with-lease --no-verify

    - name: Create and Push Tag
      shell: bash
      run: |
        if git tag -a "${{ env.TAG_VERSION }}" -m "Release: ${{ env.TAG_VERSION }}" 2>/dev/null; then
          echo "Tag created"
          git push origin "${{ env.TAG_VERSION }}" --force
        else
          echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping tag push..."
        fi

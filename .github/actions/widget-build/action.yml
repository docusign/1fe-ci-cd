name: "Widget Build and Versioning"
description: "Builds the widget, calculates version, and archives artifact."
inputs:
  node-version:
    description: "Node.js version to use"
    required: false
    default: "22"
  base-branch:
    description: "The base branch to commit/tag back to"
    required: false
    default: "main"
  app-id:
    description: "GitHub App ID for authentication"
    required: true
  private-key:
    description: "GitHub App private key for authentication"
    required: true
outputs: # Outputs from this composite action
  widgetId:
    description: "The ID of the built widget"
    value: ${{ steps.set_vars.outputs.widgetId }}
  nextVersion:
    description: "The calculated next version of the widget"
    value: ${{ steps.set_vars.outputs.nextVersion }}

runs:
  using: "composite" # <--- IMPORTANT: This defines it as a composite action
  steps:
    - name: Checkout Caller's Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for amending and tagging (if needed by subsequent composite actions like git-ops)
    
    - name: Generate GitHub App Token
      id: generate-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}
    
    - name: Test GitHub App Token
      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      shell: bash
      run: |
        gh api octocat
    
    - name: Configure Git User (Simple)
      shell: bash
      run: |
        git config --global user.name "1fe-admin"
        git config --global user.email "1fe-admin@docusign.com"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: "yarn"

    - name: Install Dependencies
      shell: bash
      run: yarn install --no-immutable

    - name: Build the Widget
      shell: bash
      run: yarn build:widget

    - name: Calculate next version and set outputs
      id: set_vars # Keep this ID for outputs
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          npm version prepatch --no-git-tag-version --preid "PR-${{ github.event.pull_request.number }}.${GITHUB_SHA::7}"
        elif [[ "${{ inputs.base-branch }}" == "main" ]]; # Use input base-branch for comparison
        then
          npm version patch --no-git-tag-version
        fi

        WIDGET_ID_VAL=$(npm pkg get name | tr -d '"')
        NEXT_VERSION_VAL=$(npm pkg get version | tr -d '"')

        echo "Debug: Widget ID extracted (composite build): $WIDGET_ID_VAL"
        echo "Debug: Next Version extracted (composite build): $NEXT_VERSION_VAL"

        echo "widgetId=$WIDGET_ID_VAL" >> $GITHUB_OUTPUT
        echo "nextVersion=$NEXT_VERSION_VAL" >> $GITHUB_OUTPUT

    - name: Archive build artifact
      uses: actions/upload-artifact@v4
      with:
        name: widget-build
        path: ./dist

    - name: Set Git Remote URL with GitHub App Token
      if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', inputs.base-branch)
      shell: bash
      run: |
        git remote set-url origin https://x-access-token:${{ steps.generate-token.outputs.token }}@github.com/${{ github.repository }}

    - name: Prepare Commit Message and Tag
      if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', inputs.base-branch)
      shell: bash
      env:
        VERSION: ${{ steps.set_vars.outputs.nextVersion }}
        WIDGET_NAME: ${{ steps.set_vars.outputs.widgetId }}
        INTEGRATION_CDN_URL: "https://1fe-a.akamaihd.net/integration/widgets"
        PREVIEW_URL: "https://demo.1fe.com/bathtub"
      run: |
        BUNDLE_URL="${INTEGRATION_CDN_URL}/${WIDGET_NAME}/${VERSION}/js/1fe-bundle.js"
        COMMIT_MSG="Bundle will be uploaded to: ${BUNDLE_URL} / Preview here: ${PREVIEW_URL}?widgetUrl=${BUNDLE_URL}&fixPreview=true [skip ci]"
        echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
        echo "TAG_VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Stage package.json and Commit for non-PR runs
      if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', inputs.base-branch)
      shell: bash
      run: |
        git add package.json
        git commit --amend --no-verify -m "${{ env.COMMIT_MSG }}" || echo "Nothing to amend"

    - name: Fetch and Force Push to Remote for non-PR runs
      if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', inputs.base-branch)
      shell: bash
      run: |
        set -euo pipefail
        git fetch origin ${{ inputs.base-branch }}
        git reset --hard HEAD
        git push origin HEAD:${{ inputs.base-branch }} --force-with-lease --no-verify

    - name: Create and Push Tag
      if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', inputs.base-branch)
      shell: bash
      run: |
        if git tag -a "${{ env.TAG_VERSION }}" -m "Release: ${{ env.TAG_VERSION }}" 2>/dev/null; then
          echo "Tag created"
          git push origin "${{ env.TAG_VERSION }}" --force
        else
          echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping tag push..."
        fi

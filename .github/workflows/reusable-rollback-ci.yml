# 1fe-ci-cd/.github/workflows/reusable-rollback-ci.yml
name: Reusable Widget Rollback CI
permissions:
  contents: read # We only need to read the package.json, not write to the repo
  id-token: write # Required for OIDC authentication if reusable-update-azure-config uses it

on:
  workflow_call: # This makes it a reusable workflow
    inputs:
      target-version:
        description: "The specific version to roll back to (e.g., 1.0.3 or 1.0.3-PR-123.abcde12)"
        required: true
        type: string
      environment:
        description: "The environment to rollback (must be 'integration' or 'production')"
        required: true
        type: string
      caller-repo-ref: # Input to specify the caller repo's ref (branch, tag, or SHA)
        description: "The Git ref (branch, tag, or SHA) of the caller repository to checkout."
        required: true
        type: string
      caller-repo: # Input to specify the caller repo name (owner/repo-name)
        description: "The full name (owner/repo-name) of the caller repository to checkout."
        required: true
        type: string
    secrets:
      AZURE_APP_CONFIG_CONNECTION_STRING:
        required: true

jobs:
  rollback:
    name: Rollback Widget Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Caller's Code
        # Use a separate checkout action to get the caller's repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.caller-repo }}
          ref: ${{ inputs.caller-repo-ref }}
          path: ./caller-repo-code # Checkout into a specific directory
          fetch-depth: 1 # Only fetch depth 1 is needed to read package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Get Widget ID from package.json
        id: get_widget_id
        # Now we need to specify the path to the package.json
        run: |
          cd ./caller-repo-code
          echo "widgetId=$(npm pkg get name | tr -d '"')" >> $GITHUB_OUTPUT

      - name: Construct CDN URL and Check Asset Existence
        id: check_cdn
        env:
          WIDGET_ID: ${{ steps.get_widget_id.outputs.widgetId }}
          TARGET_VERSION: ${{ inputs.target-version }} # Use inputs directly
        run: |
          CDN_BASE_URL="https://1fe-a.akamaihd.net"
          # Determine the CDN path based on the environment
          if [[ "${{ inputs.environment }}" == "integration" ]]; then
            CDN_PATH="integration"
          elif [[ "${{ inputs.environment }}" == "production" ]]; then
            CDN_PATH="production"
          else
            echo "Error: Invalid environment specified."
            exit 1
          fi

          BUNDLE_URL="${CDN_BASE_URL}/${CDN_PATH}/widgets/$WIDGET_ID/$TARGET_VERSION/js/1fe-bundle.js"
          echo "Checking CDN for asset: $BUNDLE_URL"

          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BUNDLE_URL")
          echo "CDN check returned HTTP Status: $HTTP_STATUS"

          if [[ "$HTTP_STATUS" -eq 200 ]]; then
            echo "Asset found on CDN. Proceeding with rollback."
            echo "asset_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Asset NOT found on CDN (HTTP Status: $HTTP_STATUS). Cannot proceed with rollback."
            echo "asset_exists=false" >> $GITHUB_OUTPUT
            exit 1 # Fail the job if asset not found
          fi

      - name: Update Azure App Config
        if: ${{ steps.check_cdn.outputs.asset_exists == 'true' }}
        # The reusable-update-azure-config.yml must also be in the central repo or publicly accessible
        uses: ./.github/workflows/reusable-update-azure-config.yml
        with:
          environment: ${{ inputs.environment }}
          widgetId: ${{ steps.get_widget_id.outputs.widgetId }}
          nextVersion: ${{ inputs.target-version }}
          AZURE_APP_CONFIG_CONNECTION_STRING: ${{ secrets.AZURE_APP_CONFIG_CONNECTION_STRING }}
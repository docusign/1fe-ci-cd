name: Reusable Minimal Widget CI
permissions:
  contents: write
  id-token: write
on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22"
      base-branch:
        description: "The base branch to commit/tag back to"
        required: false
        type: string
        default: "main"
    secrets:
      PRIVATE_KEY_FOR_1FE:
        required: true
      PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG:
        required: true
      AKAMAI_NS_SSH_PRIVATE_KEY:
        required: true
      AZURE_APP_CONFIG_CONNECTION_STRING:
        required: true

jobs:
  build:
    name: Build and Commit Version
    runs-on: ubuntu-latest
    outputs:
      widgetId: ${{ steps.set_vars.outputs.widgetId }}
      nextVersion: ${{ steps.set_vars.outputs.nextVersion }}
    steps:
      - name: Checkout Caller's Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git User
        run: |
          git config --global user.email "DevOpsTeam@docusign.com"
          git config --global user.name "svc-git-devops"
      - name: Set up dependency SSH keys
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_FOR_1FE }}
            ${{ secrets.PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "yarn"
      - name: Install Dependencies
        run: yarn install --no-immutable
      - name: Build the Widget
        run: yarn build:widget
      - name: Calculate next version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            npm version prepatch --no-git-tag-version --preid "PR-${{ github.event.pull_request.number }}.${GITHUB_SHA::7}"
          elif [[ "${{ github.ref_name }}" == "${{ inputs.base-branch }}" ]]; then
            npm version patch --no-git-tag-version
          fi
      - name: Set Widget ID and Version Output
        id: set_vars
        run: |
          echo "widgetId=$(npm pkg get name | tr -d '"')" >> $GITHUB_OUTPUT
          echo "nextVersion=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT
      - name: Upload to Akamai (Integration)
        env:
          AKAMAI_NS_SSH_PRIVATE_KEY: ${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}
          WIDGET_ID: ${{ steps.set_vars.outputs.widgetId }}
          NEXT_VERSION: ${{ steps.set_vars.outputs.nextVersion }}
        run: |
          set -e; SSH_KEY_PATH="$HOME/key.pem"; printf "%s\n" "$AKAMAI_NS_SSH_PRIVATE_KEY" > "$SSH_KEY_PATH"; chmod 600 "$SSH_KEY_PATH"; local_source_dir="dist"; staging_dir="staging_for_rsync"; relative_path_to_create="integration/widgets/$WIDGET_ID/$NEXT_VERSION"; full_staging_path="$staging_dir/$relative_path_to_create"; mkdir -p "$full_staging_path"; cp -a "$local_source_dir/." "$full_staging_path/"; REMOTE_HOST="sshacs@1fe.rsync.upload.akamai.com"; SSH_OPTS="-o StrictHostKeyChecking=no -oBatchMode=yes -i $SSH_KEY_PATH"; cd "$staging_dir"; rsync -avvRO -e "ssh $SSH_OPTS" "integration/" "$REMOTE_HOST:"; cd ..; rm -rf "$staging_dir"; shred -u "$SSH_KEY_PATH" || rm -f "$SSH_KEY_PATH"
      - name: Archive build artifact
        uses: actions/upload-artifact@v4
        with:
          name: widget-build
          path: ./dist
      - name: Commit, Tag and Push Version
        if: github.ref_name == inputs.base-branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: 'package.json'
          commit_message: "Bundle will be uploaded to: https://1fe-a.akamaihd.net/integration/widgets/${{ steps.set_vars.outputs.widgetId }}/${{ steps.set_vars.outputs.nextVersion }}/js/1fe-bundle.js / Preview here: https://demo.1fe.com/bathtub?widgetUrl=https://1fe-a.akamaihd.net/integration/widgets/${{ steps.set_vars.outputs.widgetId }}/${{ steps.set_vars.outputs.nextVersion }}/js/1fe-bundle.js&fixPreview=true [skip ci]"
          commit_user_name: svc-git-devops
          commit_user_email: DevOpsTeam@docusign.com
          commit_options: '--amend --no-verify'
          tagging_message: ${{ steps.set_vars.outputs.nextVersion }}
          push_options: '--follow-tags'

  lint-test:
    name: Lint Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up dependency SSH keys
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_FOR_1FE }}
            ${{ secrets.PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn install --no-immutable
      - name: Run Linting
        run: yarn lint

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up dependency SSH keys
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_FOR_1FE }}
            ${{ secrets.PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn install --no-immutable
      - name: Run Unit Tests
        run: yarn test

  contract-test:
    name: Contract Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up dependency SSH keys
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_FOR_1FE }}
            ${{ secrets.PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn install --no-immutable
      - name: Run Contract Tests
        run: echo "Running contract tests..."

  playwright-test:
    name: Playwright E2E Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up dependency SSH keys
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_FOR_1FE }}
            ${{ secrets.PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn install --no-immutable
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test

  release-integration:
    name: Release to Integration
    needs: [build, lint-test, unit-test, contract-test, playwright-test]
    if: github.ref_name == inputs.base-branch
    uses: ./.github/workflows/reusable-update-azure-config.yml
    with:
      environment: integration
      widgetId: ${{ needs.build.outputs.widgetId }}
      nextVersion: ${{ needs.build.outputs.nextVersion }}
    secrets:
      AZURE_APP_CONFIG_CONNECTION_STRING: ${{ secrets.AZURE_APP_CONFIG_CONNECTION_STRING }}

  upload-production:
    name: Upload to Production
    runs-on: ubuntu-latest
    needs: [build, release-integration]
    if: github.ref_name == inputs.base-branch
    env:
      AKAMAI_NS_SSH_PRIVATE_KEY: ${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}
      WIDGET_ID: ${{ needs.build.outputs.widgetId }}
      NEXT_VERSION: ${{ needs.build.outputs.nextVersion }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: widget-build
          path: ./dist
      - name: Upload to Akamai (Production)
        run: |
          set -e; SSH_KEY_PATH="$HOME/key.pem"; printf "%s\n" "$AKAMAI_NS_SSH_PRIVATE_KEY" > "$SSH_KEY_PATH"; chmod 600 "$SSH_KEY_PATH"; local_source_dir="dist"; staging_dir="staging_for_rsync"; relative_path_to_create="production/widgets/$WIDGET_ID/$NEXT_VERSION"; full_staging_path="$staging_dir/$relative_path_to_create"; mkdir -p "$full_staging_path"; cp -a "$local_source_dir/." "$full_staging_path/"; REMOTE_HOST="sshacs@1fe.rsync.upload.akamai.com"; SSH_OPTS="-o StrictHostKeyChecking=no -oBatchMode=yes -i $SSH_KEY_PATH"; cd "$staging_dir"; rsync -avvRO -e "ssh $SSH_OPTS" "production/" "$REMOTE_HOST:"; cd ..; rm -rf "$staging_dir"; shred -u "$SSH_KEY_PATH" || rm -f "$SSH_KEY_PATH"

  test-production:
    name: Test Production
    runs-on: ubuntu-latest
    needs: upload-production
    if: github.ref_name == inputs.base-branch
    steps:
      - name: Run production smoke tests
        run: echo "Running post-upload tests on production..."

  approve-production-release:
    name: Approve Production Release
    runs-on: ubuntu-latest
    needs: test-production
    if: github.ref_name == inputs.base-branch
    environment: production-release
    steps:
      - run: echo "Production release approved."

  release-production:
    name: Release to Production
    needs: [build, approve-production-release]
    if: github.ref_name == inputs.base-branch
    uses: ./.github/workflows/reusable-update-azure-config.yml
    with:
      environment: production
      widgetId: ${{ needs.build.outputs.widgetId }}
      nextVersion: ${{ needs.build.outputs.nextVersion }}
    secrets:
      AZURE_APP_CONFIG_CONNECTION_STRING: ${{ secrets.AZURE_APP_CONFIG_CONNECTION_STRING }}